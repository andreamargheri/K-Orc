/*
  File Find.java

  Generated by xklaim compiler
*/

import java.io.* ;
import Klava.* ;

public class Find extends KlavaProcess {
  // parameters
  protected KString itemId;
  protected KInteger maxPrice;
  protected KString reqId;
  // variables
  protected LogicalLocality s = new LogicalLocality( "s" ) ;
  protected LogicalLocality finish = new LogicalLocality( "finish" ) ;
  protected KInteger q;
  protected KInteger p;
  protected PhysicalLocality locnext;
  protected Tuple __tuple_1;
  protected KInteger __backup_1_q;
  protected KInteger __backup_2_p;
  protected KBoolean __to_1;
  protected KBoolean __exp_1;
  // used definition names

  public Find(
    KString itemId,
    KInteger maxPrice,
    KString reqId
  ) {
    // parameters
    this.itemId = itemId ;
    this.maxPrice = maxPrice ;
    this.reqId = reqId ;
  }

  public void execute() throws KlavaException {
    p = new KInteger( 0 ) ;
    q = new KInteger( 0 ) ;
    __tuple_1 = new Tuple() ;
    __tuple_1.add( itemId ) ;
    __backup_1_q = q ;
    q = new KInteger() ;
    __tuple_1.add( q ) ;
    __backup_2_p = p ;
    p = new KInteger() ;
    __tuple_1.add( p ) ;
    __to_1 = new KBoolean( read_t( __tuple_1, self, 200 ) ) ;
    if ( ! __to_1.booleanValue() ) {
      q = __backup_1_q ;
      p = __backup_2_p ;
    }
    __exp_1 = new KBoolean( p.intValue() <= maxPrice.intValue() ) ;
    if ( __exp_1.booleanValue() ) {
      __exp_1 = new KBoolean( p.intValue() > 0 ) ;
    }
    if ( ( __exp_1.booleanValue() ) ) {
      out( itemId, q, p, reqId, s ) ;
    }
    locnext = new PhysicalLocality() ;
    read( new KString( "next" ), locnext, self ) ;
    if ( ( ! locnext.equals( getPhysicalLocality( ( finish ) ) ) ) ) {
      eval(  new Find( itemId, maxPrice, reqId ), locnext ) ;
    }
    out( new KString( "end search" ), self ) ;
  }
}
